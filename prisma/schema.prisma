generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  deposits  Deposit[] @relation("UserDeposits")
  items     Item[]
  bids      Bid[]
}

model Deposit {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    Int      @map("user_id")
  user      User     @relation("UserDeposits", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Item {
  id            Int      @id @default(autoincrement())
  name          String
  startingPrice Float
  timeWindow    Int      // Represented in seconds
  state         ItemState @default(DRAFT) // You can only publish one item at a time. You need to wait for the existing auction to finish before publishing or auctioning this item again.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User?    @relation(fields: [createdById], references: [id])
  createdById   Int?
  publishedAt   DateTime?
  auctions      Auction[]
}

model Auction {
  id            Int       @id @default(autoincrement())
  itemId        Int       
  item          Item      @relation(fields: [itemId], references: [id])
  biddingOpen   Boolean   @default(true)
  createdAt     DateTime  @default(now())
  endTime       DateTime?
  currentPrice  Float?
  bids          Bid[]
}

model Bid {
  id          Int     @id @default(autoincrement())
  auctionId   Int
  userId      Int
  price       Float
  auction     Auction @relation(fields: [auctionId], references: [id])
  user        User    @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
}

enum ItemState {
  DRAFT
  PUBLISHED
}
